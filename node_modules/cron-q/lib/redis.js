// datastore.js
var async = require('async');
var redis = require('redis');
var url = require('url');
var LOCAL_REDIS_URL = 'redis://localhost:6379';

redis.debug_mode = process.env.DEBUG_REDIS || false;

function Client(redis_options){
  this._redis_options = redis_options;

  var PREFIX_JOB = redis_options.prefix;
  var KEY_PENDING_JOB_IDS   = PREFIX_JOB+"cronjob:ids:pending",
    KEY_COMPLETE_JOB_IDS  = PREFIX_JOB+"cronjob:ids:complete",
    KEY_FAILED_JOB_IDS    = PREFIX_JOB+"cronjob:ids:failed",
    KEY_CRON_JOB_EMSG     = function(id){return PREFIX_JOB+"cronjob:emsg:"+id;},
    KEY_CRON_JOB_DATA     = function(id){return PREFIX_JOB+"cronjob:data:"+id;},
    KEY_CRON_JOB_TIME     = function(id){return PREFIX_JOB+"cronjob:time:"+id;};


  function createClient(options){
    var client = redis.createClient(options.port, options.hostname || options.host, options);
      client.on("error", function (err) {
      console.log("Error when creating redis client:" + err);
    });
    return client;
  }

  var client = createClient(redis_options);

  function defaultDone(err){
    if(err){
      console.log('Default callback method:', err);
    }
  }

  function assureFunc(done){
    if(typeof done == 'function'){
      return done;
    }else{
      return defaultDone;
    }
  }

  function nextId(done){
    client.incr(PREFIX_JOB+"job:counter", function(){
      done.apply(null, arguments);
    });
  }

  function _async_get_pending_job_callback(id){
    return function(callback){
            var multi = client.multi();
            multi.get(KEY_CRON_JOB_DATA(id))
              .get(KEY_CRON_JOB_TIME(id))
              .exec(function(error, data_time){
                var data = data_time[0];
                try{
                  data = data && JSON.parse(data);
                }catch(e){
                  data = data_time[0];
                }
                callback(error, {data:data, time:data_time[1]});
              });
          };
  }

  this.getRedisConfig = function(){
    return this._redis_options;
  };

  this.reset = function(done){
    client.keys(PREFIX_JOB+"*", function(err, keys){
      if(keys.length){
        client.del(keys, done);
      }else{
        done();
      }
    });
  };

  this.addCronJob = function(data, timestamp, done){
    nextId(function(err, id){
      if(id){
        data._id_ = id;

        var multi = client.multi();
        multi.sadd(KEY_PENDING_JOB_IDS, id);
        multi.set(KEY_CRON_JOB_DATA(id), JSON.stringify(data));
        multi.set(KEY_CRON_JOB_TIME(id), timestamp);
        return multi.exec(function(error){
          done(error, data);
        });
      }else{
        done(err);
      }
    });
  };

  this.onCronJobComplete = function(id, done){
    var multi = client.multi();
    multi.srem(KEY_PENDING_JOB_IDS, id);
    // TODO: MINOR: Persist completed jobs other place
    multi.sadd(KEY_COMPLETE_JOB_IDS, id);
    multi.del(KEY_CRON_JOB_DATA(id));
    multi.del(KEY_CRON_JOB_TIME(id));
    multi.exec(assureFunc(done));
  };

  this.onCronJobFailed = function(id, msg, done){
    var multi = client.multi();
    multi.srem(KEY_PENDING_JOB_IDS, id);
    multi.sadd(KEY_FAILED_JOB_IDS, id);
    multi.set(KEY_CRON_JOB_EMSG(id), msg);
    multi.exec(assureFunc(done));
  };


  this.updateJobData = function(id, data, override, done){
    if(arguments.length <= 3){
      done = override;
      override = false;
    }
    if(!override){
      client.get(KEY_CRON_JOB_DATA(id), function(err, d){
        if(err){
          assureFunc(done)(err);
        }else if(d){
          var obj = JSON.parse(d);
          for(var k in data){
            if(typeof data[k] == 'undefined'){
              delete obj[k];
            }else{
              if(k == 'data'){
                obj.data = obj.data || {};
                for(var k1 in data.data){
                  obj.data[k1] = data.data[k1];
                }
              }else{
                obj[k] = data[k];
              }
            }
          }

          client.set(KEY_CRON_JOB_DATA(id), JSON.stringify(obj), assureFunc(done));
        }else{
          assureFunc(done)(new Error("Can't find job data by id:"+id));
        }
      });
    }else{
      client.set(KEY_CRON_JOB_DATA(id), JSON.stringify(data), assureFunc(done));
    }
   };

  this.updateJobTime = function(id, timestamp, done){
      client.set(KEY_CRON_JOB_TIME(id), timestamp, assureFunc(done));
  };

  this.getJobData = function(job_id, done){
    client.get(KEY_CRON_JOB_DATA(job_id), function(err, d){
      if(err){
        assureFunc(done)(err);
      }else{
        assureFunc(done)(null, d?JSON.parse(d):d);
      }
    });
  };

  this.getPendingJobs = function(done){
    client.smembers(KEY_PENDING_JOB_IDS, function(err, ids){
      if(!err){
        var async_q = {};
        for(var i = 0, m = ids.length; i < m; i++){
          var id = ids[i];
          async_q[''+id] = _async_get_pending_job_callback(id);
        }
        async.parallel(async_q, assureFunc(done));
      }else{
        assureFunc(done)(err);
      }
    });
  };
}

function option(redis_url, prefix){
  if(redis_url && typeof redis_url == 'object'){
    if(prefix){
      redis_url.prefix = prefix;
    }
    return redis_url;
  }
  redis_url = redis_url || LOCAL_REDIS_URL;
  var rtg = url.parse(redis_url);
  var redis_options = {
      host: rtg.hostname,
      port: rtg.port
  };
  if(rtg.auth){
    redis_options.auth_pass = redis_options.pass = rtg.auth.split(':')[1];
  }
  if(prefix){
    redis_options.prefix = prefix;
  }
  return redis_options;
}

exports.getClient = function(redis_config, prefix){
  prefix = prefix || 'cQ:';
  var redis_options = option(redis_config, prefix);
  return new Client(redis_options);
};